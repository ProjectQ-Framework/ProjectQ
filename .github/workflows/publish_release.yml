name: "Publish new release"

on:
  workflow_dispatch:
  push:
    tags:
      - v[0-9]+.*
  pull_request:
    branches:
      - master
    types:
      - closed

jobs:
  packaging:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        os:
          - ubuntu-latest
          # - windows-latest
          # - macos-latest

    steps:
      - uses: actions/checkout@v2
        if: github.event_name != 'workflow_dispatch'

      - uses: actions/checkout@v2
        if: github.event_name == 'workflow_dispatch'
        with:
          ref: 'master'

      - name: Get history and tags for SCM versioning to work
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      # ========================================================================

      - name: Extract version from branch name (for release branches) (Unix)
        if:  github.event_name == 'pull_request' && startsWith(github.event.pull_request.head.ref, 'release/') && runner.os != 'Windows'
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#release/}
          git tag v${VERSION} master

      - name: Extract version from branch name (for hotfix branches) (Unix)
        if: github.event_name == 'pull_request'  && startsWith(github.event.pull_request.head.ref, 'hotfix/') && runner.os != 'Windows'
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#hotfix/}
          git tag v${VERSION} master

      # ------------------------------------------------------------------------

      - name: Extract version from branch name (for release branches) (Windows)
        if:  github.event_name == 'pull_request' && startsWith(github.event.pull_request.head.ref, 'release/') && runner.os == 'Windows'
        run: |
          $BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          $VERSION = $BRANCH_NAME -replace "release/",""
          git tag v${VERSION} master

      - name: Extract version from branch name (for hotfix branches) (Windows)
        if: github.event_name == 'pull_request'  && startsWith(github.event.pull_request.head.ref, 'hotfix/') && runner.os == 'Windows'
        run: |
          $BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          $VERSION = $BRANCH_NAME -replace "hotfix/",""
          git tag v${VERSION} master

      # ========================================================================

      # - name: Build binary wheels
      #   uses: joerick/cibuildwheel@v1.11.1
      #   env:
      #     CIBW_ARCHS: auto64
      #     CIBW_MANYLINUX_X86_64_IMAGE: manylinux1
      #     CIBW_SKIP: cp27-* pp* cp35-*
      #     CIBW_BEFORE_BUILD: python -m pip install pybind11

      - name: Build source distribution
        if: runner.os == 'Linux'
        run: python3 setup.py sdist -d wheelhouse

      - name: Check metadata
        run: |
          python3 -m pip install twine --prefer-binary
          python3 -m twine check wheelhouse/*

      - uses: actions/upload-artifact@v2
        with:
          name: packages
          path: ./wheelhouse/*

  # upload_to_testpypi:
  #   name: Upload to TestPyPI
  #   runs-on: ubuntu-latest
  #   needs: packaging
  #   steps:
  #   - uses: actions/setup-python@v2

  #   # Downloads all to directories matching the artifact names
  #   - uses: actions/download-artifact@v2

  #   - name: Publish standard package
  #     uses: pypa/gh-action-pypi-publish@release/v1
  #     with:
  #       user: __token__
  #       password: ${{ secrets.testpypi_password }}
  #       repository_url: https://test.pypi.org/legacy/
  #       packages_dir: packages/


  # test_on_testpypi:
  #   name: Install wheels on ${{ matrix.os }}
  #   runs-on: ${{ matrix.os }}
  #   needs: upload_to_testpypi
  #   strategy:
  #     matrix:
  #       os: [ubuntu-20.04, windows-2019, macos-10.15]
  #       python:
  #       - 3.6
  #       - 3.7
  #       - 3.8
  #       - 3.9
  #   steps:
  #   - name: Setup Python ${{ matrix.python }}
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: ${{ matrix.python }}
  #       architecture: 'x64'

  #   - name: Install wheel
  #     run: >
  #       python -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple
  #       --only-binary projectq
  #       projectq

  #   - name: Quick test
  #     run: >
  #       python -c 'from projectq.cengines import MainEngine;
  #       from projectq.ops import All, Measure, H, CNOT;
  #       eng = MainEngine();
  #       qureg = eng.allocate_qureg(2);
  #       H | qureg[0];
  #       CNOT | (qureg[0], qureg[1]);
  #       All(Measure) | qureg;
  #       eng.flush();
  #       print([int(qb) for qb in qureg])'


  # test_on_ubuntu_bionic:
  #   name: Install wheels on Ubuntu Bionic (18.04)
  #   needs: upload_to_testpypi
  #   runs-on: ubuntu-latest
  #   container: ubuntu:bionic
  #   env:
  #     DEBIAN_FRONTEND: noninteractive
  #   steps:
  #   - name: Setup Python
  #     run: |
  #       apt update
  #       apt upgrade -y && apt dist-upgrade -y
  #       apt install -y python3-dev python3-pip python3-numpy python3-scipy python3-matplotlib python3-requests python3-sympy python3-pybind11
  #       python3 -m pip install -U pip setuptools

  #   - name: Install wheel
  #     run: >
  #       python3 -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple
  #       --only-binary projectq projectq

  #   - name: Quick test
  #     run: >
  #       python3 -c 'from projectq.cengines import MainEngine;
  #       from projectq.ops import All, Measure, H, CNOT;
  #       eng = MainEngine();
  #       qureg = eng.allocate_qureg(2);
  #       H | qureg[0];
  #       CNOT | (qureg[0], qureg[1]);
  #       All(Measure) | qureg;
  #       eng.flush();
  #       print([int(qb) for qb in qureg])'


  release:
    name: Publish new release
    runs-on: ubuntu-latest
    needs:
      - packaging
      # - test_on_testpypi
      # - test_on_ubuntu_bionic
    steps:
      - name: Extract version from tag name (workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          TAG_NAME=$(git describe --tags `git rev-list --tags --max-count=1`)
          VERSION=${TAG_NAME#v}

          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Extract version from tag name
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          TAG_NAME="${GITHUB_REF/refs\/tags\//}"
          VERSION=${TAG_NAME#v}

          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Extract version from branch name (for release branches)
        if:  github.event_name == 'pull_request' && startsWith(github.event.pull_request.head.ref, 'release/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#release/}

          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Extract version from branch name (for hotfix branches)
        if: github.event_name == 'pull_request'  && startsWith(github.event.pull_request.head.ref, 'hotfix/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#hotfix/}

          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

      # ------------------------------------------------------------------------
      # Checkout repository to get CHANGELOG

      - uses: actions/checkout@v2
        if: github.event_name != 'workflow_dispatch'

      - uses: actions/checkout@v2
        if: github.event_name == 'workflow_dispatch'
        with:
          ref: 'master'

      # ------------------------------------------------------------------------
      # Downloads all to directories matching the artifact names
      - uses: actions/download-artifact@v2

      # Code below inspired from this action:
      # - uses: taiki-e/create-gh-release-action@v1
      #   with:
      #     title: ProjectQ $tag
      #     changelog: CHANGELOG.md
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release
        env:
          target: x86_64-unknown-linux-musl
          parse_changelog_tag: v0.3.0
          changelog: CHANGELOG.md
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # https://github.com/taiki-e/parse-changelog
          curl -LsSf "https://github.com/taiki-e/parse-changelog/releases/download/${parse_changelog_tag}/parse-changelog-${target}.tar.gz" | tar xzf -
          notes=$(./parse-changelog "${changelog}" "${RELEASE_VERSION}")
          rm -f ./parse-changelog

          if [[ "${tag}" =~ ^v?[0-9\.]+-[a-zA-Z_0-9\.-]+(\+[a-zA-Z_0-9\.-]+)?$ ]]; then
            prerelease="--prerelease"
          fi
          gh release create "v${RELEASE_VERSION}" ${prerelease:-} --title "ProjectQ v${RELEASE_VERSION}" --notes "${notes:-}" packages/*


  upload_to_pypi:
    name: Upload to PyPI
    runs-on: ubuntu-latest
    needs: release
    steps:
    - uses: actions/setup-python@v2

    # Downloads all to directories matching the artifact names
    - uses: actions/download-artifact@v2

    - name: Publish standard package
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.pypi_password }}
        packages_dir: packages/

  master_to_develop_pr:
    name: Merge master back into develop
    runs-on: ubuntu-latest
    needs:
      - release
      - upload_to_pypi
    steps:
      - name: Merge master into develop branch
        uses: thomaseizinger/create-pull-request@1.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          head: master
          base: develop
          title: Merge master into develop branch
          body: |
            This PR merges the master branch back into develop.
            This happens to ensure that the updates that happend on the release branch, i.e. CHANGELOG and manifest updates are also present on the develop branch.
